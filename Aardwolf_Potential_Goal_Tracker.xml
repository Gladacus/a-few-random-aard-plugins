<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, October 08, 2010, 6:26 PM -->
<!-- MuClient version 4.61 -->

<!-- Plugin "Wordgame" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Potential_Goal_Tracker"
   author="Mendaloth"
   id="7d5b4dad4e9807dd1f4388b0"
   language="Lua"
   purpose="Tracks progress/costs for potential."
   save_state="y"
   date_written="2010-10-08 18:25:13"
   requires="4.61"
   version="1.0"
   >
   
<description trim="n">
<![CDATA[
<=================== ACTIONS ===================>
potgoal help             --> Displays this message.                                 
potgoal addgoal <goal>   --> Adds a goal for potential.
potgoal delgoal <goal>   --> Deletes a goal.

<=================== REPORTS ===================>
potgoal nextgoal         --> Shows how many QPs until your next potential goal.
potgoal endgoal          --> Shows how many QPs until your last potential goal.
potgoal allgoals         --> Shows how many QPs for all of your last potential goals.
	   
potgoal mcosts <qty>     --> Shows how many QPs to buy <qty> in potential.
potgoal cost <frm> <to>  --> Shows how many QPs it takes to go <frm> <to> potential.
                           > Mostly to help your friends...

]]>
</description>   

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
     <trigger
   enabled="y"
   match="^You have (\d*?) points of potential\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
	  <send>
		local new_potential = tonumber("%1")
		if (new_potential ~= current_potential) then
			current_potential = new_potential
			Note("Potential has been updated to " .. current_potential .. ".")
			SaveState()
		end
	  </send>
  </trigger> 
  
   <trigger
   enabled="y"
   match="^You spend (\d*?) quest points to increase your potential to (\d*?)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
	  <send>
		local new_potential = tonumber("%2")
		if (new_potential ~= current_potential) then
			current_potential = new_potential
			Note("Potential has been updated to " .. current_potential .. ".")
			SaveState()
		end
			
		
	  </send>
  </trigger> 
  
  
  
</triggers>


<!--  Aliases  -->

<aliases>  
<alias
   match="potgoal help"
   enabled="y"
   send_to="12"
   sequence="95"
   expand_variables="y"
  >
  <send>
	 Note(GetPluginInfo (GetPluginID(), 3))
</send>
</alias>

<alias
   match="potgoal addgoal *"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="100">
  <send>
		local goal = tonumber("%1")
		if (goal == nil) then
			Note("You must enter a number for the goal.")
			return
		end
		for key, value in pairs(potential_goals) do
			if (value == goal) then
				Note("You already have a goal set for %1.")
				return
			end
		end
		table.insert(potential_goals, goal)
		--Now sort so the lowest is first.
		table.sort (potential_goals)	
		SaveState()
		Note("You added an potential goal of %1.")
  </send>
</alias> 


<alias
   match="potgoal delgoal *"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="100">
  <send>
		local goal = tonumber("%1")
		if (goal == nil) then
			Note("You must enter a number for the goal to delete.")
			return
		end
		
		for key, value in pairs(potential_goals) do
			if (value == goal) then
				table.remove(potential_goals, key)
				Note("%1 potential is no longer a goal..")
				SaveState()
				return
			end
		end
		-- it does not exist so can't very well delete it
		Note("Can't seem to find a goal of %1 potential.")
  </send>
</alias> 


<alias
   match="potgoal mcosts *"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="100">
  <send>
		local qty = tonumber("%1")
		if (qty == nil) then
			Note("You must enter a number for the quantity of potential.")
			return
		end
		
		local end_goal = current_potential + qty
		
		local basestats = Get_Tier_Base_Max_Stats(Get_Current_Tier())
		
		Note("")
		Note ("It would cost " .. Convert_Number_Thousands(Get_Potential_Cost(current_potential, end_goal)) .. " QPs to buy " .. qty .. " points of potential and go from " .. basestats + current_potential .. " stats to " ..  basestats + end_goal .. " stats.")
		Note("")
		
  </send>
</alias>  

<alias
   match="potgoal cost * *"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="100">
  <send>
		local start_potential = tonumber("%1")
		local end_potential = tonumber("%2")
		if (start_potential == nil or end_potential == nil) then
			Note("You must enter a number the starting and ending potential.")
			return
		end
		
		local qty = end_potential - start_potential
		
		Note("")
		Note ("It would cost " .. Convert_Number_Thousands(Get_Potential_Cost(start_potential, end_potential)) .. " QPs to buy " .. qty .. " points of potential and go from " .. start_potential .. " points to " ..  end_potential .. " points of potential.")
		Note("")
  </send>
</alias>

<alias
   match="potgoal*"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="101">
  <send>
		Note("That's not a valid command for the potential goal plugin, here is the help file find by typing potgoal help:")
		Note(GetPluginInfo (GetPluginID(), 3))
  </send>
</alias>  



  
<alias
   match="potgoal allgoals"
   enabled="y"
   send_to="12"
   sequence="100"
   expand_variables="y"
  >
	<send>
		Full_Potential_Report(false) --false is because we aren't doing NEXTGOAL
	</send>
</alias>

<alias
   match="potgoal nextgoal"
   enabled="y"
   send_to="12"
   sequence="100"
   expand_variables="y"
  >
	<send>
		Full_Potential_Report(true) --true will only show the nextgoal.
	</send>
</alias>

<alias
   match="potgoal endgoal"
   enabled="y"
   send_to="12"
   sequence="100"
   expand_variables="y"
  >
	<send>
		Display_End_Goal()
	</send>
</alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[

save_state="y"

require "serialize"
require "addxml"

function OnPluginSaveState ()
	SetVariable ("current_potential", current_potential)
	SetVariable ("potential_goals", serialize.save ("potential_goals"))
end -- function OnPluginSaveState

function OnPluginInstall ()	
	current_potential = tonumber(GetVariable ("current_potential")) or 0
	potential_goals = {}
	assert (loadstring (GetVariable ("potential_goals") or "")) ()
end

function Get_Potential_Cost(current_potential, ending_potential)
	local total_cost = 0
	for i = current_potential+1, ending_potential, 1 do -- I do plus 1, because you don't actually need to buy your current potential point...
		--Note("The point is " .. i .. " the cost is " .. Get_Cost_Single_Potential(i))
		total_cost = total_cost + Get_Cost_Single_Potential(i)
	end
	return total_cost
end

function Get_Cost_Single_Potential(point)
	if (point < 1) then
		return 0
	end
	
	if (point <= 151) then
		return 75+(25*point)
	else
		return 3850+((point-151)*50)
	end
end

function Get_Current_Tier()
	local rest
	local chartier
	res, chartier = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.base.tier")

	return tonumber(chartier)
end

function Get_Tier_Base_Max_Stats(tier)
  local base = 1725
  local per_tier_bonus = 25
  
  return (tier * per_tier_bonus) + base
end


function Full_Potential_Report(stop_after_first)	
	--stop_after_first is true when you want to stop after the FIRST potential goal, used when you only want to show the first potential
	
	local seperator = "+-----+--------+------------+----------+"
	
	local basestats = Get_Tier_Base_Max_Stats(Get_Current_Tier())
	
	Note(seperator)
	Note(string.format("|       Current potential: %-3.3s         |", current_potential))
	Note(seperator)
	
	Note("| Max | Points |     QP     |  Goal %  |")
	
	Note(seperator)
	for key, value in pairs(potential_goals) do
		local qp_cost = Get_Potential_Cost(current_potential, value)
		if (qp_cost <= 0) then
			if (not stop_after_first) then
				--Don't show ones you've already got
				Note(string.format("|%-5.5s|%-8.8s|%10.10s  | %6.6s   |", basestats + value, value, "    DONE! ", "100.0%"))
				Note(seperator)
			end
		else
			Note(string.format("|%-5.5s|%-8.8s|%10.10s  | %6.6s   |", basestats + value, value, Convert_Number_Thousands(qp_cost), string.format("%.1f%%", (current_potential/value)*100)))
			Note(seperator)
			if (stop_after_first) then
				return
			end
		end
	end
	
			
end

function Display_End_Goal()	
	local seperator = "+-----+--------+------------+----------+"
	local basestats = Get_Tier_Base_Max_Stats(Get_Current_Tier())
	
	Note(seperator)
	Note(string.format("|       Current potential: %-3.3s         |", current_potential))
	Note(seperator)
	
	Note("| Max | Points |     QP     |  Goal %  |")
	
	Note(seperator)
	
	--Any time a potential is inserted, the whole array is sorted
	--so the last item in the array will always be the end goal
	
	local end_goal = potential_goals[#potential_goals]
	
	local qp_cost = Get_Potential_Cost(current_potential, end_goal)
	if (qp_cost <= 0) then
		--Alraedy reached the goal!!
		Note(string.format("|%-5.5s|%-8.8s|%10.10s  | %6.6s   |", basestats + end_goal, end_goal, " DONE!!! ", "100.0%"))
		Note(seperator)
	else
		Note(string.format("|%-5.5s|%-8.8s|%10.10s  | %6.6s   |", basestats + end_goal, end_goal, Convert_Number_Thousands(qp_cost), string.format("%.1f%%", (current_potential/end_goal)*100)))
		Note(seperator)
	end		
end

function Convert_Number_Thousands(number)
	if (number < 1000) then
		return number
	else 
		number = number/1000
		return string.format("%.2fK", number)
	end
end

]]>
</script>


</muclient>
